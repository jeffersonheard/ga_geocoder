__author__ = 'jeffersonheard'

import re
from hashlib import md5

def compose_rhs(*functions):
    """return a function which applies input functions from left to right to an input string.  All functions should return
    a pair of (list, string).
    """
    def newfunc(input_string):
        result = []
        remainder = input_string
        for func in functions:
            tokens, remainder = func(remainder)
            result.extend(tokens)
        return result, remainder

    return newfunc

def compose_lhs(*functions):
    """return a function which applies input *functions from left to right.  The input to the first function will be
    an input_string. The remaining functions will be applied piecewise to the list of tokens generated by the application
    of the first function.  The return value will be the final list of tokens, followed by the string result of the first
    applied function.  all functions should return a pair of (list, string)."""
    def newfunc(input_string):
        tokens, input_string = functions[0](input_string)
        for func in functions[1:]:
            tokens = reduce(list.__add__, (toks for toks, remainder in map(func, tokens)), [])
        return tokens, input_string

    return newfunc

def lower_case(input_string):
    """composable function that lowercases an input string"""
    return [], input_string.lower()

def strip_punctuation(input_string):
    """composable function that strips all non alphanumeric/whitespace characters from the input_string"""
    return [], re.sub(r'(?:[^A-z0-9]|\s+)', ' ', input_string)

def split_numbers(input_string):
    """Split out contiguous numbers"""
    toks = re.findall('[0-9]+', input_string)
    input_string = re.sub('[0-9]+', ' ', input_string)
    return toks, input_string

def split_spaces(input_string):
    """Split tokens out based on chunks of spaces.  Will always leave an empty input string"""
    return re.split(r'\s+', input_string.strip()), ''

def squeeze_spaces(input_string):
    """Squeeze multiple spaces into one space."""
    return [], re.sub(r'\s+', ' ', input_string)

def trigrams(input_string):
    """Split an input string into overlapping trigrams"""
    if len(input_string) == 0:
        return [], ''
    elif len(input_string) > 3:
        return ([input_string[x:x+3] for x in range(len(input_string)-3) ], '')
    else:
        return [input_string], ''

def tokens(func):
    """Turn a series of composed tokenizers into a complete parser by tranforming the type signature.  Input type
    signature will be (string -> [string], string).  Output type signature will be (string -> [string])"""
    def newfunc(input_str):
        if not input_str:
            return None
        else:
            tk, _ = func(input_str)
            return tk if len(tk)>0 else None

    return newfunc

def ci_code(istr):
    """Take an input string and treat it as a case insensitive code"""
    return istr.strip().lower()

def cs_code(istr):
    """Take an input string and treat it as a case sensitive code.  Identity except it strips leading and trailing whitespace"""
    return istr.strip().lower()

def cs_shortcode(istr):
    """Take an input string, potentially long, and return its MD5 sum"""
    code = md5()
    code.update(istr.strip())
    return code.hexdigest()

def ci_shortcode(istr):
    """Take an input string considered to be case insensitive, potentially long, and return its MD5 sum"""
    code = md5()
    code.update(istr.strip().lower())
    return code.hexdigest()